import re

Small = {
    'zero': 0,
    'un': 1,
    'deux': 2,
    'trois': 3,
    'quatre': 4,
    'cinq': 5,
    'six': 6,
    'sept': 7,
    'huit': 8,
    'neuf': 9,
    'dix': 10,
    'onze': 11,
    'douze': 12,
    'treize': 13,
    'quatorze': 14,
    'quinze': 15,
    'seize': 16,
    'dix-sept': 17,
    'dix-huit': 18,
    'dix-neuf': 19,
    'vingt': 20,
    'trente': 30,
    'quarante': 40,
    'cinquante': 50,
    'soixante': 60,
    'soixante-dix': 70,
    'quatre-vingts': 80,
    'quatre-vingts-dix': 90
}

Magnitude = {
    'mille':     1000,
    'milles':    1000,
    'million':      1000000,
    'millions':     1000000,
    'milliard':     1000000000,
    'milliards':    1000000000,
    'trillion':     1000000000000,
    'quadrillion':  1000000000000000,
    'quintillion':  1000000000000000000,
    'sextillion':   1000000000000000000000,
    'septillion':   1000000000000000000000000,
    'octillion':    1000000000000000000000000000,
    'nonillion':    1000000000000000000000000000000,
    'decillion':    1000000000000000000000000000000000,
}

class NumberException(Exception):
    def __init__(self, msg):
        Exception.__init__(self, msg)

def text2num(s):
    a = re.split(r"[\s]+", s)
    n = 0
    g = 0
    for w in a:
        x = Small.get(w, None)
        if x is not None:
            g += x
        elif w == "cents" and g != 0:
            g *= 100
        elif w == "cent" and g == 0:
            g = 100
        else:
            x = Magnitude.get(w, None)
            if x is not None:
                n += g * x
                g = 0
            else:
                raise NumberException("Unknown number: "+w)
    return n + g


if __name__ == "__main__":
    assert 1 == text2num("un")
    assert 12 == text2num("douze")
    assert 72 == text2num("soixante douze")
    assert 97 == text2num("quatre-vingts dix-sept")
    assert 300 == text2num("trois cents")
    assert 1200 == text2num("un mille deux cents")
    assert 12104 == text2num("douze milles cent quatre")
    assert 6000000 == text2num("six millions")
    assert 6400005 == text2num("six millions quatre cents milles cinq")
    assert 123456789012 == text2num("cent vingt trois milliard quatre cents cinquante six millions sept cents quatre-vingts neuf mille douze")
    assert 4000000000000000000000000000000000 == text2num("quatre decillion")
